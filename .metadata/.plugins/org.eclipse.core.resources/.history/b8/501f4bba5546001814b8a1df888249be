package com.niit.skillmapweb.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import com.niit.SkillMap.Model.Employee;
import com.niit.SkillMap.Service.EmployeeService;
@RestController
@RequestMapping("/api/employee")
public class EmployeeController {

	@Autowired
	private EmployeeService employeeService;
	
	@GetMapping
	public ResponseEntity<List<Employee>> listAllEmployees() {
		
		return new ResponseEntity<List<Employee>>(employeeService.findAllEmployees(), HttpStatus.CREATED);
	}
	
	@GetMapping("/{empId}")
	public ResponseEntity<Employee> getEmployee(@PathVariable("empId") int empId) {
		
		if(employeeService.findEmployeesById(empId)!=null) {
			return new ResponseEntity<Employee>(employeeService.findEmployeesById(empId), HttpStatus.OK);
		}
		else 
			return new ResponseEntity<Employee>(HttpStatus.NOT_FOUND); 
	}
	
	@DeleteMapping("/{empId}")
	public ResponseEntity<Void> deleteEmployee(@PathVariable("empId") int empId) {
		
		if(employeeService.findEmployeesById(empId)!=null) {
			employeeService.deleteEmployee(empId);
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		else 
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND); 
	}
	
	@PostMapping
	public ResponseEntity<Void> addEmployee(@RequestBody Employee employee) {
		
		if(employeeService.findEmployeesByName(employee.getName())!=null) {
			
			return new ResponseEntity<Void>(HttpStatus.CONFLICT);
		}
		else {
			employeeService.addEmployee(employee);
			return new ResponseEntity<Void>(HttpStatus.CREATED);
		}
	}
	
	@PutMapping
	public ResponseEntity<Void> updateEmployee(@RequestBody Employee employee) {
		
		if(employeeService.findEmployeesById(employee.getEmpId())!=null) {
			employeeService.updateEmployee(employee);
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		else {
			
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}
	}
	
	
	
}
/*@RestController
//@RequestMapping("/data/emp")
public class EmployeeController 
{

	@Autowired
	 EmployeeService employeeService;  //Service which will do all data retrieval/manipulation work
	     
	    //-------------------Retrieve All Employee--------------------------------------------------------
	   @RequestMapping(value = "/emp", method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
		//@GetMapping
	    public ResponseEntity <List<Employee>>listAllEmployee() 
	    {
			//return employeeService.findAllEmployees();
	       List<Employee> employee = employeeService.findAllEmployees();
	        if(employee.isEmpty())
	        {
	            return new ResponseEntity<List<Employee>>(HttpStatus.NO_CONTENT);//You many decide to return HttpStatus.NOT_FOUND
	        }
	        return new ResponseEntity<List<Employee>>(employee, HttpStatus.OK);
	    }
	    
	    //-------------------Retrieve Single Employee--------------------------------------------------------
	    @RequestMapping(value = "/emp/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	    public ResponseEntity<Employee> getUser(@PathVariable("id") int id)
	    {
	        //System.out.println("Fetching User with name " + id);
	        Employee employee = employeeService.findEmployeesById(id);
	        if (employee == null)
	        {
	           // System.out.println("User with name " + id+ " not found");
	            return new ResponseEntity<Employee>(HttpStatus.NOT_FOUND);
	        }
			return new ResponseEntity<Employee>(employee, HttpStatus.OK);

	      }
	    
	    //-------------------Create a User--------------------------------------------------------
	    @RequestMapping(value = "/emp", method = RequestMethod.POST)
	    public ResponseEntity<String> createUser(@RequestBody Employee employee)
	    {
	        //System.out.println("Creating employee " + employee.getName());
	        if(employeeService.findEmployeesByName(employee.getName())==null)
	        {
	        	employeeService.addEmployee(employee);
	        	
	        	return new ResponseEntity<String>(HttpStatus.CREATED);
	        }
	        else
	        {
	        	return new ResponseEntity<String>(HttpStatus.CONFLICT);
	        }
	    }
	    
	    //------------------- Update a User --------------------------------------------------------
	    @RequestMapping(value = "/emp/{id}", method = RequestMethod.POST)
	    public ResponseEntity<Employee> updateUser(@PathVariable("id") int id, @RequestBody Employee employee)
	    {
	    	System.out.println("Fetching & updating User with name " + id);
	    	Employee currentemployee = employeeService.findEmployeesById(id);
	        if (currentemployee == null) 
	        {
	            System.out.println("Unable to update.Employee with name " + id + " not found");
	            return new ResponseEntity<Employee>(HttpStatus.NOT_FOUND);
	        }
	        else
	        {
	        	
	        	if(employeeService.updateEmployee(employee));
	        	{
	        	return new ResponseEntity<Employee>(HttpStatus.OK);
	        	}
	        	
	        
	        }
	    }
	    
	    //------------------- Delete a User --------------------------------------------------------
	    @RequestMapping(value = "/emp/{id}", method = RequestMethod.DELETE)
	    public ResponseEntity<Employee> deleteUser(@PathVariable("id") int id) {
	        System.out.println("Fetching & Deleting User with name " + id);
	        Employee employee = employeeService.findEmployeesById(id);
	        System.out.println("***********"+employee);
	        if (employee == null) 
	        {
	            System.out.println("Unable to delete. Employee with name " + id + " not found");
	            return new ResponseEntity<Employee>(HttpStatus.NOT_FOUND);
	        }
	  
	        employeeService.deleteEmployee(id);
	        return new ResponseEntity<Employee>(HttpStatus.OK);
	    }
} */

